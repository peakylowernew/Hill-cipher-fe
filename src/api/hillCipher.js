const API_BASE_URL = process.env.REACT_APP_API_URL;
console.log("API URL:", API_BASE_URL);

export async function encryptText(text, keyMatrixString) {
    try {

        // Chuy·ªÉn chu·ªói th√†nh ma tr·∫≠n s·ªë
        const keyMatrix = keyMatrixString
            // .trim()
            // .split(" ")
            .map(Number); // Chuy·ªÉn t·ª´ng ph·∫ßn t·ª≠ th√†nh s·ªë nguy√™n

        // Ki·ªÉm tra k√≠ch th∆∞·ªõc ma tr·∫≠n (2x2 ho·∫∑c 3x3)
        let matrixSize = Math.sqrt(keyMatrix.length);
        if (![2, 3].includes(matrixSize) || !Number.isInteger(matrixSize)) {
            throw new Error("Ma tr·∫≠n kh√≥a kh√¥ng h·ª£p l·ªá! Ch·ªâ h·ªó tr·ª£ 2x2 ho·∫∑c 3x3.");
        }

        // Chuy·ªÉn th√†nh m·∫£ng 2D
        let formattedKeyMatrix = [];
        for (let i = 0; i < matrixSize; i++) {
            formattedKeyMatrix.push(keyMatrix.slice(i * matrixSize, (i + 1) * matrixSize));
        }

        const response = await fetch(`${API_BASE_URL}/api/hill/encrypt`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ text, keyMatrix: formattedKeyMatrix }),
        });

        console.log("Raw Response:", response);

        if (!response.ok) {
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("API Response:", data);

        if (!data.encryptedText) {
            throw new Error("Invalid encryptedText received");
        }

        return data;
    } catch (error) {
        console.error("L·ªói g·ªçi API m√£ h√≥a:", error);
        return { encryptedText: '', processSteps: [] };  // Tr·∫£ v·ªÅ chu·ªói thay v√¨ null ƒë·ªÉ tr√°nh l·ªói React
    }
}

export async function decryptText(text, keyMatrixString) {
    try {
        // Chuy·ªÉn chu·ªói th√†nh ma tr·∫≠n s·ªë
        const keyMatrix = keyMatrixString
            .trim()
            .split(" ")
            .map(Number); // Chuy·ªÉn t·ª´ng ph·∫ßn t·ª≠ th√†nh s·ªë nguy√™n

        // Ki·ªÉm tra k√≠ch th∆∞·ªõc ma tr·∫≠n (2x2 ho·∫∑c 3x3)
        let matrixSize = Math.sqrt(keyMatrix.length);
        if (![2, 3].includes(matrixSize) || !Number.isInteger(matrixSize)) {
            throw new Error("Ma tr·∫≠n kh√≥a kh√¥ng h·ª£p l·ªá! Ch·ªâ h·ªó tr·ª£ 2x2 ho·∫∑c 3x3.");
        }

        // Chuy·ªÉn th√†nh m·∫£ng 2D (ma tr·∫≠n)
        let formattedKeyMatrix = [];
        for (let i = 0; i < matrixSize; i++) {
            formattedKeyMatrix.push(keyMatrix.slice(i * matrixSize, (i + 1) * matrixSize));
        }

        // G·ª≠i ma tr·∫≠n ƒë√∫ng ƒë·ªãnh d·∫°ng l√™n backend
        const response = await fetch(`${API_BASE_URL}/api/hill/decrypt`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ text, keyMatrix: formattedKeyMatrix }), // üí° Fix l·ªói ·ªü ƒë√¢y
        });

        if (!response.ok) {
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        return data.decryptedText;
    } catch (error) {
        console.error("L·ªói gi·∫£i m√£:", error);
        return null;
    }
}
